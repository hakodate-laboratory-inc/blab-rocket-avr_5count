
roket.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c8  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/twi.h>


int main(void)
{
	DDRB=0b11111111;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC=0b11111111;
  84:	87 b9       	out	0x07, r24	; 7
	DDRD=0b11011111;
  86:	8f ed       	ldi	r24, 0xDF	; 223
  88:	8a b9       	out	0x0a, r24	; 10
			_delay_us(1600);
			PORTC=0b00000000;
			_delay_ms(30);
		}
		
		PORTB=0b01110110;
  8a:	e6 e7       	ldi	r30, 0x76	; 118
		_delay_ms(1000);
		PORTB=0b01010011;
  8c:	73 e5       	ldi	r23, 0x53	; 83
		_delay_ms(1000);
		PORTB=0b01100111;
  8e:	67 e6       	ldi	r22, 0x67	; 103
		_delay_ms(1000);
		PORTB=0b01101101;
  90:	5d e6       	ldi	r21, 0x6D	; 109
		_delay_ms(1000);
		PORTB=0b00000011;
  92:	43 e0       	ldi	r20, 0x03	; 3
		_delay_ms(1000);
		PORTB=0b00111111;		
  94:	3f e3       	ldi	r19, 0x3F	; 63
		
		for (int i=0;i<=33;i++)
		{
			PORTC=0b00100000;
  96:	20 e2       	ldi	r18, 0x20	; 32
	DDRC=0b11111111;
	DDRD=0b11011111;

	while (1)
	{
		while((PIND&&0b00100000)==0b00000000)
  98:	89 b1       	in	r24, 0x09	; 9
  9a:	81 11       	cpse	r24, r1
  9c:	0f c0       	rjmp	.+30     	; 0xbc <main+0x3c>
		{
			PORTC=0b00100000;
  9e:	28 b9       	out	0x08, r18	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e7       	ldi	r24, 0x7F	; 127
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
			_delay_us(1600);
			PORTC=0b00000000;
  ac:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	af e5       	ldi	r26, 0x5F	; 95
  b0:	ba ee       	ldi	r27, 0xEA	; 234
  b2:	11 97       	sbiw	r26, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
  ba:	ee cf       	rjmp	.-36     	; 0x98 <main+0x18>
			_delay_ms(30);
		}
		
		PORTB=0b01110110;
  bc:	e5 b9       	out	0x05, r30	; 5
  be:	bf ef       	ldi	r27, 0xFF	; 255
  c0:	f9 e6       	ldi	r31, 0x69	; 105
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	b1 50       	subi	r27, 0x01	; 1
  c6:	f0 40       	sbci	r31, 0x00	; 0
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		_delay_ms(1000);
		PORTB=0b01010011;
  d0:	75 b9       	out	0x05, r23	; 5
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	a9 e6       	ldi	r26, 0x69	; 105
  d6:	b8 e1       	ldi	r27, 0x18	; 24
  d8:	91 50       	subi	r25, 0x01	; 1
  da:	a0 40       	sbci	r26, 0x00	; 0
  dc:	b0 40       	sbci	r27, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
		_delay_ms(1000);
		PORTB=0b01100111;
  e4:	65 b9       	out	0x05, r22	; 5
  e6:	ff ef       	ldi	r31, 0xFF	; 255
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	f1 50       	subi	r31, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
		_delay_ms(1000);
		PORTB=0b01101101;
  f8:	55 b9       	out	0x05, r21	; 5
  fa:	af ef       	ldi	r26, 0xFF	; 255
  fc:	b9 e6       	ldi	r27, 0x69	; 105
  fe:	f8 e1       	ldi	r31, 0x18	; 24
 100:	a1 50       	subi	r26, 0x01	; 1
 102:	b0 40       	sbci	r27, 0x00	; 0
 104:	f0 40       	sbci	r31, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
		_delay_ms(1000);
		PORTB=0b00000011;
 10c:	45 b9       	out	0x05, r20	; 5
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	99 e6       	ldi	r25, 0x69	; 105
 112:	a8 e1       	ldi	r26, 0x18	; 24
 114:	81 50       	subi	r24, 0x01	; 1
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	a0 40       	sbci	r26, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x94>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x9e>
 11e:	00 00       	nop
		_delay_ms(1000);
		PORTB=0b00111111;		
 120:	35 b9       	out	0x05, r19	; 5
 122:	82 e2       	ldi	r24, 0x22	; 34
 124:	90 e0       	ldi	r25, 0x00	; 0
		
		for (int i=0;i<=33;i++)
		{
			PORTC=0b00100000;
 126:	28 b9       	out	0x08, r18	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	a7 e7       	ldi	r26, 0x77	; 119
 12a:	b5 e0       	ldi	r27, 0x05	; 5
 12c:	11 97       	sbiw	r26, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0xac>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xb2>
 132:	00 00       	nop
			_delay_us(700);
			PORTC=0b00000000;
 134:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	af e5       	ldi	r26, 0x5F	; 95
 138:	ba ee       	ldi	r27, 0xEA	; 234
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0xba>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xc0>
 140:	00 00       	nop
 142:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(1000);
		PORTB=0b00000011;
		_delay_ms(1000);
		PORTB=0b00111111;		
		
		for (int i=0;i<=33;i++)
 144:	81 f7       	brne	.-32     	; 0x126 <main+0xa6>
 146:	a8 cf       	rjmp	.-176    	; 0x98 <main+0x18>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
